

##### 库命令

库安装命令都是在 *Terminal* 当中执行。

```


# 指令安装（从默认的pip源中下载，速度较慢）
pip install XXX(包名)

# 镜像源安装（从国内镜像源网站中下载，速度快）
pip install XXX(包名) -i http://mirrors.aliyun.com/pypi/simple/

# 文件信息下载安装（根据requirements.txt文件里面的安装库的包名和版本号信息，来下载对应的包）
# requirements.txt文件：
                    selenium==3.6.0
                    Scrapy==1.5.1
                    pymongo==3.5.1
                    lxml==4.2.5
pip install -r requirements.txt

#列出所有已安装的三方库
pip list   

# 列出当前已安装且过期的第三方库
pip list --outdated  

# 更新已安装的三方库
pip install --upgrade 库名  
```

在增加、删除等改变列表元素个数的操作中，列表长度也会随之变化。

```
例子：删除[23, 43, 45, 78, 32, 90, 89, 10, 9, 1]所有小于60分的成绩

错误方法：
score = [23, 43, 45, 78, 32, 90, 89, 10, 9, 1]
for item in score:
    if item < 60:
        score.remove(item)
print(score)  # [43, 78, 90, 89, 9]

程序过程：
# [23, 43, 45, 78, 32, 90, 89, 10, 9, 1] 	# 23  1 删除
# [43, 45, 78, 32, 90, 89, 10, 9, 1] 		# 45  2 删除
# [43, 78, 32, 90, 89, 10, 9, 1] 			# 32  3 删除
# [43, 78, 90, 89, 10, 9, 1] 				# 89  4
# [43, 78, 90, 89, 10, 9, 1] 				# 10  5 删除
# [43, 78, 90, 89, 9, 1] 					# 1   6 删除
# [43, 78, 90, 89, 9]


# score[:] 取出所有的元素产生新列表
for item in score[:]:
    if item < 60:
        score.remove(item)
print(score)  # [78, 90, 89]
```

### 计数器

```
from collections import Counter

def list_():
    list1 = [1, 1, 1, 7, 8, 4, 4, 7, 7, 7]
    list_count = Counter(list1)
    print(list_count)

if __name__ == '__main__':
    list_()
 
输出：
Counter({7: 4, 1: 3, 4: 2, 8: 1})
# 注释：这里输出了列表中某个数字出现的次数，并从多到少进行了排序
```

```
def delete_list(lt):
    a = list(filter(lambda x: x != "", lt))
    lt = list(a)
    return lt  # 返回lt

lt = ["", 1, 2, 3, ""]
print(delete_list(lt))

结果：
[1, 2, 3]

```

### 计数器

```
a = ['apple', 'banana', 'apple', 'tomato', 'apple', 'banana']
b = {}
for i in a:
    b[i] = b.get(i, 0) + 1

print(b)    # {'apple': 3, 'banana': 2, 'tomato': 1}
```

### 计数器

```
from collections import Counter

def tuple_():
    tuple1 = (1, 1, 1, 7, 8, 4, 4, 7, 7, 7)
    tuple_count = Counter(tuple1)
    print(tuple_count)

if __name__ == '__main__':
    tuple_()
 
输出：
Counter({7: 4, 1: 3, 4: 2, 8: 1})
这里输出了列表和数组中某个数字出现的次数，并从多到少进行了排序
```

字典转元祖

方法：字典.items()

作用：将字典中所有的键值对转换成一个一个的元祖，**key作为元祖的第一个元素，value作为元祖的第二个元素**

```
student_dict = {'name': '张三', 'score': {'english': 60, 'math': 100}}
print(student_dict.items())   

输出：
dict_items([('name', '张三'), ('score', {'english': 60, 'math': 100})])
```

